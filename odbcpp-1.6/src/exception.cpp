//
// File:	src/exception.cpp
// Object:	Implementation of the exception object handling the ODBC errors
// Project:	http://www.m2osw.com/odbcpp
// Author:	alexis_wilke@sourceforge.net
//
// Copyright (C)   2008-2011 Made to Order Software Corp.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>
// or <http://gpl3.m2osw.com/>.
//

#include	"odbcpp/exception.h"

namespace odbcpp
{


/** \class odbcpp_error
 *
 * \brief The odbcpp exception object.
 *
 * This class is used to generate exception in the odbcpp
 * library.
 *
 * The content of the error is a diagnostic and a complete
 * message. The message can be retrieved with the standard
 * what() function call of the runtime_error that this
 * class derives from.
 *
 * \code
 * 	try {
 * 		environment env;
 * 		connection conn(env);
 * 		...
 * 	}
 * 	catch(odbcpp_error& err)
 * 	{
 * 		std::cerr << "The error was: " << e.what() << std::endl;
 * 	}
 * \endcode
 *
 * \note
 * In this example, the environment uses the latest available version
 * of ODBC. At this time, version 3.
 *
 * \sa diagnostic
 */


/** \fn odbcpp_error::odbcpp_error(const diagnostic& diag)
 *
 * \brief Constructor an exception
 *
 * Initializes the odbcpp_error with the specified diagnostic.
 *
 * \param[in] diag   The diagnostic to save in this odbcpp error
 */

/** \fn odbcpp_error::get() const
 *
 * \brief Get a copy of the diagnostic saved in this exception.
 *
 * This function retrieves a copy of the exception diagnostics.
 *
 * The diagnostics are generated by calling the necessary
 * ODBC functions (i.e. SQLGetDiagField() with 5 different fields.)
 *
 * \return A copy of the exception diagnostic
 */

/** \var odbcpp_error::f_diag
 *
 * \brief The diagnostic that caused this exception
 *
 * Whenever a diagnostic represents an error or a warning, it
 * generates an exception.
 *
 * The exception keeps a copy of the diagnostic so you have a
 * changes to display the error to your user or accept a certain
 * number of errors as "normal behavior" in some circumstances.
 *
 * You can retrieve a copy of the diagnostic using the
 * odbcpp_error::get() const function.
 */



}	// namespace odbcpp

